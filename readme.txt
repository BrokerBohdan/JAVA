1.Чим компіляція відрізняється від інтерпретації? Які переваги кожної з них?
Компіляція: початковий код перетворюється у машинний код до виконання.
Інтерпретація: код виконується покроково інтерпретатором без попередньої трансляції.
Переваги компіляції: швидке виконання після компіляції.
Переваги інтерпретації: легше тестувати та змінювати код без потреби в повній компіляції.

2.Що таке початковий код, байткод, машинний код? Яка між ними різниця? Що таке JIT-компіляція?
Початковий код: текст програми, написаний на мовах високого рівня.
Байткод: проміжний код, який виконується віртуальною машиною (наприклад, JVM у Java).
Машинний код: інструкції, які безпосередньо виконує процесор.
JIT-компіляція: компіляція байткоду у машинний код під час виконання програми для пришвидшення роботи.

3.Що таке віртуальна машина?
Віртуальна машина (VM): програмна система, яка виконує байткод як ніби це машинний код для конкретної платформи (наприклад, JVM для Java).

4.Що таке кросплатформність? Чи є кросплатформними застосунки на мові Java? Чи є кросплатформною віртуальна машина Java?
Кросплатформність: можливість запуску програми на різних операційних системах без змін у коді.
Java-застосунки кросплатформні, бо виконуються на JVM, яка працює на різних ОС.
JVM теж є кросплатформною, бо може запускатися на різних платформах.

5.Дати пояснення кожному зі слів у початковому коді HelloWorld: class, public, static, void, String, System, out, println

    class: оголошення класу.
    public: доступний з будь-якої частини програми.
    static: метод належить класу, а не його екземплярам.
    void: метод не повертає значення.
    String: тип даних для текстових рядків.
    System: клас для доступу до системних ресурсів.
    out: об'єкт для виведення даних.
    println: метод для виведення тексту з переходом на новий рядок.

6.Що буде, якщо в одному з цих слів змінити регістр літер, наприклад, замість «class» написати «CLASS»?
Зміна регістру призведе до помилки компіляції, бо Java чутлива до регістру літер.

7.Чи можна в одній системі встановити одночасно кілька різних версій Java? Якщо «ні» - пояснити чому. Якщо «так» - пояснити як, і взагалі для чого комусь таке робити?
Так, можна використовувати кілька версій Java, застосовуючи менеджери версій (наприклад, SDKMAN). Це корисно для розробників, які працюють з проектами, що вимагають різних версій Java.